import numpy as np

def nextwordcounter_dict(worddict,allword,markov,indexlist,textlist):
    '''Creates a dictionary of reference words keyed to a dictionary for each possible word keyed to it's occurance counter.'''
    for word in allword:    #list comprehension for list of each word position of words in data
        indexlist.append([i for i, x in enumerate(textlist) if x == word])
    for inde in range(len(indexlist)):
        listnext = []
        smalldict = dict()
        for i in indexlist[inde]:   #traceback to indexlist to create dictionary with following word
            if i != len(textlist)-1:
                listnext.append(textlist[i+1]) 
        listnextuni = list(dict.fromkeys(listnext)) 
        for i in listnextuni:   #key occurance counter to following word
            smalldict[i] = listnext.count(i) 
        worddict[allword[inde]] = smalldict

    for word1 in worddict: #Adds the probability elements to it's position for the word in the column
        tot = sum(worddict.get(word1).values())
        for word in worddict.get(word1).keys(): 
            markov[allword.index(word), allword.index(word1)] = worddict.get(word1)[word]/tot 

def nextthreewords(inputword,allword,markov,lentot):
    '''Takes input word, locates if word in matrix and outputs the 3 most probable following words. '''
    if inputword in allword:     #Checks following word
        wordvector = np.zeros((lentot,1))
        wordvector[allword.index(inputword),0] = 1
        for n in range(3):  #Selects highest probable word in column, three times
            wordvector = markov.dot(wordvector)
            maxpos = next(i for i, x in enumerate(wordvector) if x == wordvector.max())
            nextword = allword[maxpos] 
            print(nextword)

def main(inputword):
    allword = []
    '''    allword = ["the", "english","book","from","sound","to","sense","hello","Sir. Durian","you","killed","my","father",",","prepare","die","!","Sir. Jalapeno","that","made","does","not","make", "me","because","in","order","feet","must","for","from","spices",".","get","armpit","fast",]    # listan med alla unika ord'''
    if inputword not in allword:    #Checks if input word has a following word from data
        print('___\n___\n___\n')
    lentot = len(allword)
    markov = np.zeros((lentot, lentot)) #Skapar matris med enbart 0or
    textlist = []
    '''textlist = ["the","english","book","from","sound","to","sense","hello","Sir. Durian","you","killed","my","father",",","prepare", "to","die","!","hello","Sir. Jalapeno","the","sound","you","made","does","not","make","sense","to", "me","because","in","order","to","sense","my","feet","you","must","prepare", "for","the","sound","from","english","spices",".","to","me",",","you","killed","my","father", "to", "get","to","sense","my","armpit",".","to","die","fast","you","make","me","sense","the","armpit","to","me","because","in","my","father","you","get","to","die","!","hello","Sir. Durian",",","to","me",",","you","killed","the","english","father",".","to","me",",","you","make","spices","."]   #listan med texten i listform'''
    indexlist = []  #tom lista som ska fyllas med ordposition i data
    worddict = dict()
    nextwordcounter_dict(worddict, allword, markov,indexlist,textlist)
    nextthreewords(inputword,allword,markov,lentot)

if __name__ == '__main__':
    try:
        user_input = input('Enter word:')
    except:
        print('An error occured, please try again.')
        user_input = input('Enter word:')
    finally: 
        main(inputword=user_input)
